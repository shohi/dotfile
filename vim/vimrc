" use vim-plug as plugin manager. Automatically executes filetype plugin indent on and syntax enable.
set nocompatible              " be iMproved, required

" change the mapleader from \ to ,
" and keep reverse character search command
let mapleader=","
noremap \ ,

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins

" surround
Plug 'tpope/vim-surround'

" NERDtree
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" git status
Plug 'tpope/vim-fugitive'

" async lint engine
Plug 'w0rp/ale'

" fzf
" first install `fzf` using brew
" ref, https://github.com/junegunn/fzf.vim
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" rust.vim
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'

" vim-go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" lightline.vim
" Plug 'itchyny/lightline.vim'

" airline.vim
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Go autocomplete
Plug 'Shougo/deoplete.nvim'
Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}

" Nord color scheme
Plug 'arcticicestudio/nord-vim'

" yaml
Plug 'stephpy/vim-yaml'

" markdown preview plugin
Plug 'junegunn/vim-xmark', { 'do': 'make' }

" multiple selection plugin (a.k.a column edit mode)
Plug 'terryma/vim-multiple-cursors'

" Elixir and formatter
Plug 'elixir-editors/vim-elixir'
Plug 'mhinz/vim-mix-format'

" Clojure
Plug 'tpope/vim-fireplace'
Plug 'venantius/vim-cljfmt'
Plug 'guns/vim-clojure-static'

" permut - swap columns
Plug 'jlemetay/permut'

" vim-easy-align
Plug 'junegunn/vim-easy-align'

" nim
Plug 'zah/nim.vim'

" translator
Plug 'voldikss/vim-translate-me'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

" ------------------------------------------- "
"              Customized Setting             "
" ------------------------------------------- "

" -------------- basic  ----------------------
" set utf-8 as default encoding
set encoding=utf-8

" show number line
set number

" show existing tab with 4 spaces width
set tabstop=4

" when indenting with '>', use 4 spaces width
set shiftwidth=4

" On pressing tab, insert 4 spaces
set expandtab

" enable dictionary completion
set dictionary=/usr/share/dict/words

" enable folding and keep unfolded when opening a file
set foldmethod=indent
set foldlevel=99

" enable copy/paste between clipboard and vim
set clipboard^=unnamed

" clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" add shortcut for listing buffers
nnoremap <C-b> :Buffers<CR>

" enable filetype plugin
filetype plugin on

" enable matchit plugin
runtime macros/matchit.vim

" set to auto read when a file is changed from the outside
set autoread

" fast saving
nnoremap <leader>w :w!<CR>

" when searching try to be smart about cases
set smartcase

" visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call <SID>visual_selection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call <SID>visual_selection('', '')<CR>?<C-R>=@/<CR><CR>

" helper functions
function! s:cmd_line(str)
    call feedkeys(":" . a:str)
endfunction

function! s:visual_selection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call s:cmd_line("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call s:cmd_line("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" fast editing vimrc
" $MYVIMRC is not `~/.vimrc` when using neovim
nnoremap <leader>ev :vsplit ~/.vimrc<CR>

" fast sourcing vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>

" -------------- indent ----------------------
autocmd FileType sh setlocal shiftwidth=2 softtabstop=2 expandtab

" -------------- color scheme ----------------
" nord setting
" use nord color scheme as default
syntax enable
set termguicolors
colorscheme nord

" -------------- NERDTree --------------------
" refer, https://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
" refer, https://stackoverflow.com/questions/6467634/create-a-command-shortcut-for-nerdtree-in-vim-editor
noremap <leader>nr :NERDTreeFind<CR>
noremap <leader>ne :NERDTree<CR>
noremap <leader>nt :NERDTreeToggle<CR>
noremap <leader>nf :NERDTreeFocus<CR>

" ----------- NERDTree Commenter-------------
" refer, https://github.com/scrooloose/nerdcommenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1



" -------------- golang ----------------------
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1
let g:go_test_show_name = 1

autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" fast editing go alternative files
autocmd FileType go nmap <leader>ga :GoAlternate<CR>
autocmd FileType go nmap <leader>ft :GoTestFunc<CR>

" -------------- rust ------------------------
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1

autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)
autocmd FileType rust nmap <leader>tt :RustTest -- --nocapture<CR>


" -------------- fzf -------------------------
nnoremap <C-p> :FZF<CR>

" user defined command - `Rg`
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
\   <bang>0 ? fzf#vim#with_preview('up:60%')
\           : fzf#vim#with_preview('right:50%:hidden', '?'),
\   <bang>0)

nnoremap <C-s> :Rg<space>

" insert mode completion
inoremap <c-x><c-k> <plug>(fzf-complete-word)
inoremap <c-x><c-f> <plug>(fzf-complete-path)
inoremap <c-x><c-j> <plug>(fzf-complete-file-ag)
inoremap <c-x><c-l> <plug>(fzf-complete-line)

" show history
noremap <leader>h :History<CR>

" -------------- deoplete --------------------
" enable deoplete on startup
let g:deoplete#enable_at_startup = 1

" disable scratch preview window
set completeopt-=preview

inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" -------------- easy align --------------------
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" ------------------ nim --------------------
fun! JumpToDef()
  if exists("*GotoDefinition_" . &filetype)
    call GotoDefinition_{&filetype}()
  else
    exe "norm! \<C-]>"
  endif
endf

" Jump to tag
nn <M-g> :call JumpToDef()<cr>
ino <M-g> <esc>:call JumpToDef()<cr>i
