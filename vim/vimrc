" -*- vim: set ft=vim: -*-
" use vim-plug as plugin manager.
"
" TODO: refactor vimrc, https://blog.djy.io/reorganizing-my-vimrc/
"
" automatically executes filetype plugin indent on and syntax enable.
" be iMproved, required
set nocompatible

" change the mapleader from \ to ,
" and keep reverse character search command
let mapleader=","
let maplocalleader=","
noremap \ ,

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" declare the list of plugins
" surround
Plug 'tpope/vim-surround'

" NERDtree
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" git status
Plug 'tpope/vim-fugitive'

" git gutter
Plug 'airblade/vim-gitgutter'

" async lint engine
Plug 'dense-analysis/ale'

" rust.vim
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'

" vim-go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" airline.vim - lean & mean status/tabline for vim that's light as air
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" yaml
Plug 'stephpy/vim-yaml'

" markdown preview plugin
" Plug 'junegunn/vim-xmark', { 'do': 'make' } " not work on macOS 10.14.6
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }}

" markdown toc (table of contents)
Plug 'mzlogin/vim-markdown-toc'

" markdown syntax
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" table mode (also support markdown table)
Plug 'dhruvasagar/vim-table-mode'

" multiple selection plugin (a.k.a column edit mode)
Plug 'terryma/vim-multiple-cursors'

" Elixir and formatter
Plug 'elixir-editors/vim-elixir'
Plug 'mhinz/vim-mix-format'

" FIXME: only work for neovim
" https://oli.me.uk/getting-started-with-clojure-neovim-and-conjure-in-minutes/
Plug 'Olical/conjure', { 'tag': 'v2.1.2', 'do': 'bin/compile' }

" permut - swap columns
Plug 'jlemetay/permut'

" vim-easy-align
Plug 'junegunn/vim-easy-align'

" nim-lang
" FIXME: only support neoviim
Plug 'alaviss/nim.nvim'

" translator
Plug 'voldikss/vim-translator'

" undotree
Plug 'mbbill/undotree'

" repeat
Plug 'tpope/vim-repeat'

" unimpaired - pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'

" auto-pairs
Plug 'jiangmiao/auto-pairs'

" match-up
Plug 'andymass/vim-matchup'

" matchquote
Plug 'airblade/vim-matchquote'

" rainbow
Plug 'luochen1990/rainbow'

" vim-move
Plug 'matze/vim-move'

" ultisnips
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'

" whichkey
Plug 'liuchengxu/vim-which-key'

" easymotion
Plug 'easymotion/vim-easymotion'

" tagbar
Plug 'majutsushi/tagbar'

" supertab for autocomplete
Plug 'ervandew/supertab'

" window maximizer
Plug 'szw/vim-maximizer'

" copy-filename
Plug 'adamwhittingham/vim-copy-filename'

" targets provides additional text objects
Plug 'wellle/targets.vim'

" goyo - Distraction-free writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" go autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" visual indent
Plug 'nathanaelkane/vim-indent-guides'

" A git commit browser in Vim
Plug 'junegunn/gv.vim'

" Easily adds brief author info and license headers
Plug 'alpertuna/vim-header'

" shell interface
Plug 'shougo/deol.nvim'

" quick run
Plug 'thinca/vim-quickrun'

" R support
Plug 'jalvesaq/nvim-r'

" code formatter
" NOTE: vim-autoformat does not support formatters which can't read input
" from stdin or write output to stdout.
Plug 'chiel92/vim-autoformat'

Plug 'sbdchd/neoformat'

" javascript
Plug 'pangloss/vim-javascript'

" emmet
Plug 'mattn/emmet-vim'

" Async Run
Plug 'skywind3000/asyncrun.vim'

" Vim Rooter
Plug 'airblade/vim-rooter'

" Stylus
Plug 'iloginow/vim-stylus'

" Easily substitute
Plug 'tpope/vim-abolish'

" Toml
Plug 'cespare/vim-toml'

" vim-clap - generic finder and dispatcher
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }

" endwise
" Plug 'tpope/vim-endwise'

" vim-slash - enhance in-buffer search
" Plug 'junegunn/vim-slash'

" colorschemes
"   * vim-colorschemes - one colorscheme pack to rule them all (inactive)
"     - Plug 'flazz/vim-colorschemes'
"   * nord color theme
"     - Plug 'arcticicestudio/nord-vim'
"     - already included in `awesome-vim-colorschemes`
" Zenburn theme
Plug 'jnurmine/zenburn'
Plug 'rafi/awesome-vim-colorschemes'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  setting                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8        " set utf-8 as default encoding
set number                " show number line

set expandtab             " On pressing tab, insert 4 spaces
set tabstop=4             " show existing tab with 4 spaces width
set shiftwidth=4          " when indenting with '>', use 4 spaces width

set dictionary=/usr/share/dict/words " enable dictionary completion

set foldmethod=indent     " enable folding and keep unfolded when opening a file
set foldlevel=99

set clipboard^=unnamed    " enable copy/paste between clipboard and vim
set autoread              " set to auto read when a file is changed from the outside

set ignorecase            " when searching try to be smart about cases
set smartcase

filetype plugin on        " enable filetype plugin

" clear highlighting on escape in normal mode
nnoremap <silent> <esc> :noh<return><esc>
nnoremap <silent> <esc>^[ <esc>^[

" fast saving
nnoremap <leader>w :w!<CR>

" enable matchit plugin. this plugin does not work well with
" `match-up`.
" runtime macros/matchit.vim

" visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call <SID>visual_selection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call <SID>visual_selection('', '')<CR>?<C-R>=@/<CR><CR>

" helper functions
function! s:cmd_line(str)
  call feedkeys(":" . a:str)
endfunction

function! s:visual_selection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call s:cmd_line("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call s:cmd_line("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" fast editing vimrc
" $MYVIMRC is not `~/.vimrc` when using neovim
nnoremap <leader>ev :vsplit ~/.vimrc<CR>

" fast sourcing vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>

" highlight cursorline
nnoremap <leader><leader> :set cursorline! cursorcolumn!<CR>

" shell/vim indent
autocmd FileType sh,vim setlocal shiftwidth=2 softtabstop=2 expandtab

" per project setting
" https://medium.com/@dnrvs/per-project-settings-in-nvim-fc8c8877d970
" enable loading local executing local rc files.
" nvim -> xxx.nvimrc
" vim -> xxx.vimrc
set exrc
set secure


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                color scheme                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nord setting
" use nord color scheme as default
syntax enable
set termguicolors
" colorscheme nord
colorscheme zenburn

" set nord comment color
" augroup nord-theme-overrides
"  autocmd!
"  " Use 'nord7' as foreground color for Vim comment titles.
"  autocmd ColorScheme nord highlight Comment ctermfg=3 guifg=#7b88a1
" augroup END


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                nvim-python                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/deoplete-plugins/deoplete-jedi/wiki/Setting-up-Python-for-Neovim
" $> pyenv install 2.7.17
" $> pyenv install 3.8.2
"
" $> # install pyenv-virtualenv plugin, https://github.com/pyenv/pyenv-virtualenv
" $> git clone https://github.com/pyenv/pyenv-virtualenv.git \
"     $(pyenv root)/plugins/pyenv-virtualenv
" $> eval "$(pyenv virtualenv-init -)"
"
" $> pyenv virtualenv 2.7.17 neovim2
" $> pyenv activate neovim2
" $> pip install neovim
" $> pyenv which python  # Note the path
"
" $> pyenv virtualenv 3.8.2 neovim3
" $> pyenv activate neovim3
" $> pip install neovim
" $> pyenv which python  # Note the path
"
let g:python_host_prog = '~/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '~/.pyenv/versions/neovim3/bin/python'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  NERDTree                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" refer, https://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
" refer, https://stackoverflow.com/questions/6467634/create-a-command-shortcut-for-nerdtree-in-vim-editor
noremap <leader>nr :NERDTreeFind<CR>
noremap <leader>ne :NERDTree<CR>
noremap <leader>nn :NERDTreeToggle<CR>
noremap <leader>nt :NERDTreeToggle<CR>
noremap <leader>nf :NERDTreeFocus<CR>
noremap <leader>no :<C-u>call <SID>only_and_nerdtree()<CR>

" turn on case-sensitive sort
let g:NERDTreeCaseSensitiveSort=1

" Close all windows except the current one and NERDTree
" https://vi.stackexchange.com/questions/13331/close-all-windows-except-the-current-one-and-nerdtree
" only work on vim 8+
" command! Only call only_and_nerdtree()
function! s:only_and_nerdtree()
  let l:currentWindowID = win_getid()
  windo if win_getid() != l:currentWindowID && &filetype != 'nerdtree' | close | endif
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                             NERDTree Commenter                             "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" refer, https://github.com/scrooloose/nerdcommenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            NERDTree Git Plugin                             "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" default bindings
" - next hunk in nerdtree -- `]c`
" - previous hunk in nerdtree -- `[c`


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               vim-go/golang                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" use vim-go's :GoDef short cut (gd)
" which work better that LanguageClient [LC]
let g:go_def_mapping_enabled = 1

" NOTE: vim-go using gopls does not work well with coc.nvim.
" let g:go_gopls_enabled = 1
let g:go_def_mode = 'gopls'
let g:go_referrers_mode = 'gopls'
let g:go_info_mode = 'gopls'

let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1
let g:go_test_show_name = 1

" fast editing go alternative files
autocmd FileType go nmap <silent> <leader>ga :GoAlternate<CR>
autocmd FileType go nmap <silent> <leader>ft :GoTestFunc<CR>
autocmd FileType go nmap <silent> <Leader>cc <Plug>(go-coverage-toggle)
autocmd FileType go nmap <silent> <leader>pt <Plug>(go-test)
autocmd FileType go nmap <silent> <leader>gb :<C-u>call <SID>build_go_files()<CR>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    Rust                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1

autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)
autocmd FileType rust nmap <leader>ta :RustTest! -- --nocapture<CR>
autocmd FileType rust nmap <leader>tt :RustTest -- --nocapture<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  vim-clap                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://oli.me.uk/getting-started-with-clojure-neovim-and-conjure-in-minutes/
" https://github.com/liuchengxu/vim-clap
let g:clap_provider_grep_delay = 50
" let g:clap_provider_grep_opts = '-H --no-heading --vimgrep --smart-case --hidden -g "!.git/"'

nnoremap <C-p> :Clap files<CR>
nnoremap <leader>* :Clap grep ++query=<cword><CR>
nnoremap <leader>fg :Clap grep<CR>
nnoremap <leader>fb :Clap buffers<CR>
nnoremap <leader>fh :Clap history<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 EasyAlign                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    Nim                                     "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/alaviss/nim.nvim
" https://medium.com/@moinmoti/nim-on-neovim-ec3cf44dd82c
"
" use `nimlsp` to do autocompletition with coc.nvim
" + 1. install `nimlsp` - https://github.com/PMunch/nimlsp
"   - `nimble install nimlsp`
"   - export `~/.nimble/bin` to $PATH.
" + 2. add following setting to :CocConfig
"   - https://github.com/neoclide/coc.nvim/wiki/Language-servers#register-custom-language-servers
"
"  {
"    "languageserver": {
"       "nim": {
"         "command": "nimlsp",
"         "rootPatterns": ["*.nimble", ".vim/", ".git/", ".hg/"],
"         "filetypes": ["nim", "nimble", "nims"]
"       }
"    }
"  }
"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  rainbow                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" disable it by default as it does not work well with nord-theme.
" use :RainbowToggle to enable it later.
let g:rainbow_active = 0


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  vim-move                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/matze/vim-move
" set a custom modifier for key bindings to `Alt`
" set `C` to use `Ctrl`.
let g:move_key_modifier = 'A'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    ale                                     "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/dense-analysis/ale

" keybinds for ale
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" linters
" nim linter already integrated in ale
" - 'nim': ['nimlsp', 'nimcheck']
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ }

" auto fix
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'javascript': ['eslint'],
      \ }

" set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  Snippets                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetDirectories=["MyUltiSnips", "UltiSnips"]
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 which-key                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" By default timeoutlen is 1000 ms
set timeoutlen=500

" After pressing leader the guide buffer will pop up
" when there are no further keystrokes within timeoutlen.
nnoremap <silent> <leader> :WhichKey ','<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  markdown                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" disable auto update toc on save as it doesn't work well
let g:vmt_auto_update_on_save = 0

" don't insert fence
let g:vmt_dont_insert_fence = 1

" vim-markdown
" Markdown Vim Mode (https://github.com/plasticboy/vim-markdown)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 git-gutter                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  default keybinds (https://github.com/airblade/vim-gitgutter)
" [c - previous hunk
" ]c - next hunk
" <leader>hp - preview hunk
" <leader>hs - stage hunk
" <leader>hu - undo hunk


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 EasyMotion                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable default mappings
let g:EasyMotion_do_mapping = 0

" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   tagbar                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set keybind for tagbar toggle
map <Leader>tb :TagbarToggle<CR>

" golang tagbar setting
" refer-1, https://github.com/majutsushi/tagbar/wiki#google-go
" refer-2, https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }

" rust tagbar setting
" refer-1, https://github.com/majutsushi/tagbar/wiki#rust
" need `universal-ctags` installed first (https://github.com/universal-ctags/ctags)
let g:rust_use_custom_ctags_defs = 1  " if using rust.vim

"  use following config to set ctagsbin, by default `ctagsbin` is search in PATH
"  TODO: how to use ENV variable in vimrc
"  'ctagsbin' : '/path/to/your/universal/ctags'
let g:tagbar_type_rust = {
      \ 'ctagstype' : 'rust',
      \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'v:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
      \ ],
      \ 'sro': '::',
      \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
      \ },
      \ }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  supertab                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Perform all your vim insert mode completions with Tab
" run `:help supertab` for accessing supertab documentation.


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               vim-maximizer                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" disable default keymapping
let g:maximizer_set_default_mapping = 0

" set keybind for tagbar toggle
map <Leader>ww :MaximizerToggle<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 vim-table                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM Table Mode for instant table creation.

" set keybind for table model toggle
" map <Leader>tm :TableModeToggle<CR> " default

" for Markdown-compatible tables use
let g:table_mode_corner='|'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               terminal-mode                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" setting for terminals, see :help terminal-emulator for details

" map <Esc> to exit terminal-mode
" fix fzf terminal issue - https://github.com/junegunn/fzf.vim/issues/544
tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"

" or use following snippets
" if has("nvim")
"  au TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
"  au FileType fzf tunmap <buffer> <Esc>
" endif

" use `ALT+{h,j,k,l}` to navigate windows from terminal mode
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               vim-translator                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ------------------ vim-translator --------------------
" https://github.com/voldikss/vim-translator
" NOTE: no default mapping is set by default in vim-translator.
" let g:translator_window_enable_icon = 'false'

" Echo translation in the cmdline
nmap <silent> <Leader>t <Plug>Translate
vmap <silent> <Leader>t <Plug>TranslateV


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                             vim-copy-filename                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/AdamWhittingham/vim-copy-filename
nmap <leader>fp :CopyRelativePath<CR>
nmap <leader>fl :CopyRelativePathAndLine<CR>
nmap <leader>fa :CopyAbsolutePath<CR>
nmap <leader>fn :CopyFileName<CR>
nmap <leader>fd :CopyDirectoryPath<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  targets                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim plugin that provides additional text objects
" https://github.com/wellle/targets.vim#quote-text-objects

" Targets.vim comes with five kinds for text objects:
"   * Pair text objects
"   * Quote text objects
"   * Separator text objects
"   * Argument text objects
"   * Tag text objects


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    goyo                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" goyo - distraction-free writing in Vim
" https://github.com/junegunn/goyo.vim
"
" limelight - Hyperfocus-writing in Vim.
" https://github.com/junegunn/limelight.vim

" goyo & limeligth integration
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" kbd for goyo and limelight
" https://stackoverflow.com/questions/20579142/toggle-function-in-vim
let s:enable_limelight=0
function! s:toggle_limelight()
  if s:enable_limelight
    Limelight!
    let s:enable_limelight=0
  else
    Limelight
    let s:enable_limelight=1
  endif
endfunction

" toggle functions for goyo and limelight
nmap <silent> <Leader>gl :<C-u>call <SID>toggle_limelight()<CR>
xmap <silent> <Leader>gl :<C-u>call <SID>toggle_limelight()<CR>
nmap <silent> <Leader>gg :Goyo<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              markdown-preview                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/iamcco/markdown-preview.nvim
" TODO: documentation for markdown-prview

"" do not close the preview tab when switching to other buffers
" https://jdhao.github.io/2019/01/15/markdown_edit_preview_nvim/
let g:mkdp_auto_close = 0

let s:enable_mkdp=0
function! s:toggle_mkdp()
  if s:enable_mkdp
    MarkdownPreviewStop
    let s:enable_mkdp=0
  else
    MarkdownPreview
    let s:enable_mkdp=1
  endif
endfunction

nmap <silent> <Leader>m :<C-u>call <SID>toggle_mkdp()<CR>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  coc.nvim                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/neoclide/coc.nvim

" Better display for messages
" set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
" set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
" nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" nmap <silent> <C-d> <Plug>(coc-range-select)
" xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" multiple cursor
" nmap <silent> <C-c> <Plug>(coc-cursors-position)
" nmap <silent> <C-d> <Plug>(coc-cursors-word)
" xmap <silent> <C-d> <Plug>(coc-cursors-range)
" use normal command like `<leader>xi(`
" nmap <leader>x  <Plug>(coc-cursors-operator)

" coc for golang
" refer, https://octetz.com/posts/vim-as-go-ide
" add following setting to :CocConfig
"  {
"    "languageserver": {
"      "golang": {
"        "command": "gopls",
"        "rootPatterns": ["go.mod", ".vim/", ".git/", ".hg/"],
"        "filetypes": ["go"]
"      }
"    }
"  }

" coc for python
" https://github.com/neoclide/coc-python
"
" :CocInstall coc-python
"
" also need install neovim
" $> pip3 install neovim
autocmd FileType python nnoremap <silent> <leader>si :<C-u>CocCommand python.sortImports<cr>

"
" coc for bash - needs bash-language-server installed firstly
" https://github.com/mads-hartmann/bash-language-server
" {
"   languageserver": {
"     "bash": {
"       "command": "bash-language-server",
"       "args": ["start"],
"       "filetypes": ["sh"],
"       "ignoredRootPaths": ["~"]
"     }
"   }
" }

" coc for rust
" https://github.com/fannheyward/coc-rust-analyzer
"
" :CocInstall coc-rust-analyzer

" coc for R
" https://github.com/neoclide/coc-r-lsp
"
" :CocInstall coc-r-lsp


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 vim-header                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  vim-header behaves wiredly for header update, better
"  to use it for adding license only.
"
"  disable auto insert
let g:header_auto_add_header = 0
let g:header_field_timestamp = 0
" not clear how it works
let g:header_max_size = 7


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               vim-autoformat                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/chiel92/vim-autoformat

" shell script formatter using google style
" needs `shfmt` installed, https://github.com/mvdan/sh
let g:formatdef_shfmt = '"shfmt -ci -i ".(&expandtab ? shiftwidth() : "0")'
let g:formatters_sh = ['shfmt']

" javascript
" let g:formatdef_JSCS= 'jscs --preset=airbnb'
" let g:formatters_javascript = ['jsbeautify_javascript']

" let g:autoformat_verbosemode=1

xmap <silent> <leader>ff :Autoformat<CR>
nmap <silent> <leader>ff :Autoformat<CR>

augroup autoformat_group
  autocmd!
  " auto format on save for [sh,py]
  " https://github.com/z0mbix/vim-shfmt/blob/master/plugin/shfmt.vim
  autocmd BufWritePre *.sh :Autoformat
  autocmd FileType sh autocmd BufWritePre <buffer> :Autoformat

  " TODO: add formatter for vimscript

  " auto format on save for python
  " autocmd BufWritePre *.py :Autoformat
  " autocmd FileType python autocmd BufWritePre <buffer> :Autoformat
augroup END


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                airline-ale                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/dense-analysis/ale
" let g:airline#extensions#ale#enabled = 1
" let airline#extensions#ale#show_line_numbers = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                airline-coc                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/neoclide/coc.nvim/blob/master/doc/coc.txt


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 neoformat                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nim-lang
let g:neoformat_nim_custom= {
      \ 'exe': 'nimpretty',
      \ 'replace': 1,
      \ }

let g:neoformat_enabled_nim= ['custom']
let g:neoformat_run_all_formatters = 0
" let g:neoformat_verbose = 1 " only affects the verbosity of Neoformat


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 javascript                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup js_rc
  autocmd!
  autocmd BufNewFile,BufRead *.eslintrc,*.babelrc set syntax=json
augroup end


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 vim-rooter                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/airblade/vim-rooter
"
" To stop vim-rooter changing directory automatically
" Use `:Rooter` to invoke vim-rooter manually.
let g:rooter_manual_only = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  clojure                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" conjure, https://github.com/Olical/conjure
" :CocInstall coc-conjure
