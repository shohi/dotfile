" use vim-plug as plugin manager. Automatically executes filetype plugin indent on and syntax enable.
set nocompatible              " be iMproved, required

" change the mapleader from \ to ,
" and keep reverse character search command
let mapleader=","
noremap \ ,

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins

" surround
Plug 'tpope/vim-surround'

" NERDtree
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" git status
Plug 'tpope/vim-fugitive'

" git gutter
Plug 'airblade/vim-gitgutter'

" async lint engine
Plug 'dense-analysis/ale'

" fzf
" first install `fzf` using brew
" ref, https://github.com/junegunn/fzf.vim
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" rust.vim
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'

" vim-go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" lightline.vim
" Plug 'itchyny/lightline.vim'

" airline.vim - lean & mean status/tabline for vim that's light as air
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" use coc.nvim & golsp instead
" Go autocomplete
" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif

" Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}

" Nord color scheme
Plug 'arcticicestudio/nord-vim'

" yaml
Plug 'stephpy/vim-yaml'

" markdown preview plugin
" Plug 'junegunn/vim-xmark', { 'do': 'make' } " not work on macOS 10.14.6
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }}

" markdown toc (table of contents)
Plug 'mzlogin/vim-markdown-toc'

" markdown syntax
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" table mode (also support markdown table)
Plug 'dhruvasagar/vim-table-mode'

" multiple selection plugin (a.k.a column edit mode)
Plug 'terryma/vim-multiple-cursors'

" Elixir and formatter
Plug 'elixir-editors/vim-elixir'
Plug 'mhinz/vim-mix-format'

" Clojure
Plug 'tpope/vim-fireplace'
Plug 'venantius/vim-cljfmt'
Plug 'guns/vim-clojure-static'

" permut - swap columns
Plug 'jlemetay/permut'

" vim-easy-align
Plug 'junegunn/vim-easy-align'

" nim
Plug 'zah/nim.vim'

" translator
Plug 'voldikss/vim-translate-me'

" undotree
Plug 'mbbill/undotree'

" repeat
Plug 'tpope/vim-repeat'

" unimpaired - pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'

" auto-pairs
Plug 'jiangmiao/auto-pairs'

" match-up
Plug 'andymass/vim-matchup'

" matchquote
Plug 'airblade/vim-matchquote'

" rainbow
Plug 'luochen1990/rainbow'

" vim-move
Plug 'matze/vim-move'

" ultisnips
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'

" whichkey
Plug 'liuchengxu/vim-which-key'

" easymotion
Plug 'easymotion/vim-easymotion'

" tagbar
Plug 'majutsushi/tagbar'

" supertab for autocomplete
Plug 'ervandew/supertab'

" window maximizer
Plug 'szw/vim-maximizer'

" copy-filename
Plug 'adamwhittingham/vim-copy-filename'

" targets provides additional text objects
Plug 'wellle/targets.vim'

" goyo - Distraction-free writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" go autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" List ends here. Plugins become visible to Vim after this call.
call plug#end()


" ------------------------------------------- "
"              Customized Setting             "
" ------------------------------------------- "

" -------------- basic  ----------------------
" set utf-8 as default encoding
set encoding=utf-8

" show number line
set number

" show existing tab with 4 spaces width
set tabstop=4

" when indenting with '>', use 4 spaces width
set shiftwidth=4

" On pressing tab, insert 4 spaces
set expandtab

" enable dictionary completion
set dictionary=/usr/share/dict/words

" enable folding and keep unfolded when opening a file
set foldmethod=indent
set foldlevel=99

" enable copy/paste between clipboard and vim
set clipboard^=unnamed

" clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" add shortcut for listing buffers
nnoremap <C-b> :Buffers<CR>

" enable filetype plugin
filetype plugin on

" enable matchit plugin. this plugin does not work well with
" `match-up`.
" runtime macros/matchit.vim

" set to auto read when a file is changed from the outside
set autoread

" fast saving
nnoremap <leader>w :w!<CR>

" when searching try to be smart about cases
set ignorecase
set smartcase

" visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call <SID>visual_selection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call <SID>visual_selection('', '')<CR>?<C-R>=@/<CR><CR>

" helper functions
function! s:cmd_line(str)
    call feedkeys(":" . a:str)
endfunction

function! s:visual_selection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call s:cmd_line("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call s:cmd_line("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" fast editing vimrc
" $MYVIMRC is not `~/.vimrc` when using neovim
nnoremap <leader>ev :vsplit ~/.vimrc<CR>

" fast sourcing vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>

" -------------- indent ----------------------
autocmd FileType sh setlocal shiftwidth=2 softtabstop=2 expandtab

" -------------- color scheme ----------------
" nord setting
" use nord color scheme as default
syntax enable
set termguicolors
colorscheme nord

" -------------- NERDTree --------------------
" refer, https://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
" refer, https://stackoverflow.com/questions/6467634/create-a-command-shortcut-for-nerdtree-in-vim-editor
noremap <leader>nr :NERDTreeFind<CR>
noremap <leader>ne :NERDTree<CR>
noremap <leader>nn :NERDTreeToggle<CR>
noremap <leader>nt :NERDTreeToggle<CR>
noremap <leader>nf :NERDTreeFocus<CR>
noremap <leader>no :<C-u>call <SID>only_and_nerdtree()<CR>

" Close all windows except the current one and NERDTree
" https://vi.stackexchange.com/questions/13331/close-all-windows-except-the-current-one-and-nerdtree
" only work on vim 8+
" command! Only call only_and_nerdtree()
function! s:only_and_nerdtree()
    let l:currentWindowID = win_getid()
    windo if win_getid() != l:currentWindowID && &filetype != 'nerdtree' | close | endif
endfunction


" ----------- NERDTree Commenter-------------
" refer, https://github.com/scrooloose/nerdcommenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1


" -------------- golang ----------------------
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1
let g:go_test_show_name = 1

autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" fast editing go alternative files
autocmd FileType go nmap <leader>ga :GoAlternate<CR>
autocmd FileType go nmap <leader>ft :GoTestFunc<CR>

" -------------- rust ------------------------
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1

autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)
autocmd FileType rust nmap <leader>ta :RustTest! -- --nocapture<CR>
autocmd FileType rust nmap <leader>tt :RustTest -- --nocapture<CR>


" -------------- fzf -------------------------
nnoremap <C-p> :FZF<CR>

" user defined command - `Rg`
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
\   <bang>0 ? fzf#vim#with_preview('up:60%')
\           : fzf#vim#with_preview('right:50%:hidden', '?'),
\   <bang>0)

nnoremap <C-s> :Rg<space>

" insert mode completion
inoremap <c-x><c-k> <plug>(fzf-complete-word)
inoremap <c-x><c-f> <plug>(fzf-complete-path)
inoremap <c-x><c-j> <plug>(fzf-complete-file-ag)
inoremap <c-x><c-l> <plug>(fzf-complete-line)

" show history
noremap <leader>h :History<CR>

" -------------- deoplete --------------------
" # enable deoplete on startup
" let g:deoplete#enable_at_startup = 1

" # disable scratch preview window
" set completeopt-=preview
"
" inoremap <silent><expr> <TAB>
"     \ pumvisible() ? "\<C-n>" :
"     \ <SID>check_back_space() ? "\<TAB>" :
"     \ deoplete#mappings#manual_complete()
"
" function! s:check_back_space() abort
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~ '\s'
" endfunction


" -------------- easy align --------------------
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" ------------------ nim --------------------
" https://github.com/zah/nim.vim/
function! s:nim_go_to_def()
  if exists("*GotoDefinition_" . &filetype)
    call GotoDefinition_{&filetype}()
  else
    exe "norm! \<C-]>"
  endif
endfunction

" Jump to tag
" TODO: use autogroup
autocmd FileType nim nmap gd :<C-u>call <SID>nim_go_to_def()<CR>
" nn <M-g> :call JumpToDef()<cr>
" ino <M-g> <esc>:call JumpToDef()<cr>i

" ------------------ rainbow --------------------
" disable it by default as it does not work well with nord-theme.
" use :RainbowToggle to enable it later.
let g:rainbow_active = 0


" ------------------ vim-move --------------------
" https://github.com/matze/vim-move
" set a custom modifier for key bindings to `Alt`
" set `C` to use `Ctrl`.
let g:move_key_modifier = 'A'


" ------------------ ale --------------------
" keybinds for ale
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" ------------------ snippets --------------------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" ------------------ whichkey --------------------
" By default timeoutlen is 1000 ms
set timeoutlen=500

" After pressing leader the guide buffer will pop up
" when there are no further keystrokes within timeoutlen.
nnoremap <silent> <leader> :WhichKey ','<CR>


" ------------------ markdown --------------------
" disable auto update toc on save as it doesn't work well
let g:vmt_auto_update_on_save = 0

" don't insert fence
let g:vmt_dont_insert_fence = 1


" ------------------ git-gutter --------------------
"  default keybinds (https://github.com/airblade/vim-gitgutter)
" [c - previous hunk
" ]c - next hunk
" <leader>hp - preview hunk
" <leader>hs - stage hunk
" <leader>hu - undo hunk


" ------------------ easymotion --------------------
" Disable default mappings
let g:EasyMotion_do_mapping = 0

" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)


" ------------------ tagbar --------------------
" set keybind for tagbar toggle
map <Leader>tb :TagbarToggle<CR>

" golang tagbar setting
" refer-1, https://github.com/majutsushi/tagbar/wiki#google-go
" refer-2, https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" rust tagbar setting
" refer-1, https://github.com/majutsushi/tagbar/wiki#rust
" need `universal-ctags` installed first (https://github.com/universal-ctags/ctags)
let g:rust_use_custom_ctags_defs = 1  " if using rust.vim

"  use following config to set ctagsbin, by default `ctagsbin` is search in PATH
"  TODO: how to use ENV variable in vimrc
"  'ctagsbin' : '/path/to/your/universal/ctags'
let g:tagbar_type_rust = {
  \ 'ctagstype' : 'rust',
  \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'v:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
  \ ],
  \ 'sro': '::',
  \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
  \ },
\ }


" ------------------ supertab --------------------
" Perform all your vim insert mode completions with Tab
" run `:help supertab` for accessing supertab documentation.


" ------------------ vim-maximizer --------------------
" disable default keymapping
let g:maximizer_set_default_mapping = 0

" set keybind for tagbar toggle
map <Leader>ww :MaximizerToggle<CR>


" ------------------ vim-markdown --------------------
" Markdown Vim Mode (https://github.com/plasticboy/vim-markdown)


" ------------------ vim-table-mode --------------------
" VIM Table Mode for instant table creation.

" set keybind for table model toggle
" map <Leader>tm :TableModeToggle<CR> " default

" for Markdown-compatible tables use
let g:table_mode_corner='|'


" ------------------ terminal-mode --------------------
" setting for terminals, see :help terminal-emulator for details

" map <Esc> to exit terminal-mode
" fix fzf terminal issue - https://github.com/junegunn/fzf.vim/issues/544
tnoremap <expr> <Esc> (&filetype == "fzf") ? "<Esc>" : "<c-\><c-n>"

" or use following snippets
" if has("nvim")
"  au TermOpen * tnoremap <buffer> <Esc> <c-\><c-n>
"  au FileType fzf tunmap <buffer> <Esc>
" endif

" use `ALT+{h,j,k,l}` to navigate windows from terminal mode
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l

" ------------------ vim-translate-me --------------------
" https://github.com/voldikss/vim-translate-me
" default configuration
" <Leader>w - translate word under cursor
" <Leader>w again - focus on translator window
" q - close translator window


" ------------------ vim-copy-filename --------------------
" https://github.com/AdamWhittingham/vim-copy-filename
nmap <leader>fp :CopyRelativePath<CR>
nmap <leader>fl :CopyRelativePathAndLine<CR>
nmap <leader>fa :CopyAbsolutePath<CR>
nmap <leader>fn :CopyFileName<CR>
nmap <leader>fd :CopyDirectoryPath<CR>


" ------------------ targets --------------------
" Vim plugin that provides additional text objects
" https://github.com/wellle/targets.vim#quote-text-objects

" Targets.vim comes with five kinds for text objects:
"   * Pair text objects
"   * Quote text objects
"   * Separator text objects
"   * Argument text objects
"   * Tag text objects


" ------------------ goyo --------------------
" goyo - distraction-free writing in Vim
" https://github.com/junegunn/goyo.vim
"
" limelight - Hyperfocus-writing in Vim.
" https://github.com/junegunn/limelight.vim

" goyo & limeligth integration
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" kbd for goyo and limelight
" https://stackoverflow.com/questions/20579142/toggle-function-in-vim
let s:enable_limelight=0
function! s:toggle_limelight()
    if s:enable_limelight
        Limelight!
        let s:enable_limelight=0
    else
        Limelight
        let s:enable_limelight=1
    endif
endfunction

" toggle functions for goyo and limelight
nmap <silent> <Leader>gl :<C-u>call <SID>toggle_limelight()<CR>
xmap <silent> <Leader>gl :<C-u>call <SID>toggle_limelight()<CR>

nmap <Leader>gg :Goyo<CR>


" ------------------ markdown-preview --------------------
" https://github.com/iamcco/markdown-preview.nvim
" TODO: documentation for markdown-prview

"" do not close the preview tab when switching to other buffers
" https://jdhao.github.io/2019/01/15/markdown_edit_preview_nvim/
let g:mkdp_auto_close = 0

let s:enable_mkdp=0
function! s:toggle_mkdp()
    if s:enable_mkdp
        MarkdownPreviewStop
        let s:enable_mkdp=0
    else
        MarkdownPreview
        let s:enable_mkdp=1
    endif
endfunction

nmap <silent> <Leader>m :<C-u>call <SID>toggle_mkdp()<CR>


" ------------------ coc.nvim --------------------
" https://github.com/neoclide/coc.nvim

" Better display for messages
" set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
" set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
" nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" nmap <silent> <C-d> <Plug>(coc-range-select)
" xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" coc for golang
" refer, https://octetz.com/posts/vim-as-go-ide
" add following setting to :CocConfig
"  {
"    "languageserver": {
"      "golang": {
"        "command": "gopls",
"        "rootPatterns": ["go.mod", ".vim/", ".git/", ".hg/"],
"        "filetypes": ["go"]
"      }
"    }
"  }
"


" ------------------ vim-go --------------------
"
" use vim-go's :GoDef short cut (gd)
" which work better that LanguageClient [LC]
let g:go_def_mapping_enabled = 1
