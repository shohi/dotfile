#!/usr/bin/env bash

# NOTE: load `~/.bashrc` first which contains personal sensitive setting
[[ -f "$HOME/.bashrc" ]] && source "$HOME/.bashrc"

function pushd_q() {
  pushd -q "$@"
}

function popd_q() {
  popd -q "$@"
}

##############################################################
####                                                     #####
####                QUOTE                                #####
####                                                     #####
##############################################################
# refer, https://github.com/ruanyf/fortunes
function run_fortune() {
  if [[ -n "$SKIP_FORTUNE" ]]; then
    return
  fi

  if [[ ! -x "$(command -v fortune)" ]]; then
    return
  fi

  # echo "=============== Quote Of The Day ==============="
  echo

  # if [[ -x "$(command -v lolcat)" ]]; then
  #   fortune | lolcat
  # else
  #   fortune
  # fi

  fortune

  # echo "================================================"
  printf "\n"
}

run_fortune

##############################################################
####                                                     #####
####                BASIC                                #####
####                                                     #####
##############################################################

function setup_homebrew() {
  # https://juejin.im/post/5c738bacf265da2deb6aaf97
  # https://www.zhihu.com/question/31360766

  # use mirror for homebrew
  # https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git
  if [[ -z "${DISABLE_BREW_MIRROR}" ]]; then
    export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles"

    (cd "$(brew --repo)" &&
      git remote set-url origin https://mirrors.ustc.edu.cn/brew.git)

    (cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core" &&
      git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git)
  fi

  # Homebrew's sbin
  export PATH="/usr/local/sbin:$PATH"
}

function setup_locale() {
  # locale
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
}

function setup_path() {
  export EDITOR=nvim
  export FIREFOX_HOME="/Applications/Firefox.app/Contents/MacOS"
  export PATH="/usr/local/bin:$PATH:$FIREFOX_HOME"
}

function setup_git() {
  # git & hub
  eval "$(hub alias -s)"
  alias git='LANG=en_US git'
}

function setup_shortcuts() {
  # shortcuts for accessing folder
  alias sdl='cd ~/Downloads'
  alias sdc='cd ~/Documents'

  # NOTE: need `exa` installed -- cargo install exa
  alias ll='exa -l --git'

  # workshop and github
  alias ghh='cd $HOME/workshop/github'
  alias sgh='cd $HOME/workshop/github/shohi'
  alias sws='cd $HOME/workshop'

  # vim/nvim pluggings
  alias nvp='cd $HOME/.vim/plugged'

  alias remote='[[ -d $HOME/workshop/remote ]] && cd $HOME/workshop/remote'

  # useful env
  local hostip
  hostip=$(ipconfig getifaddr en0)
  export HOSTIP=${hostip}
}

setup_homebrew
setup_locale
setup_path
setup_git
setup_shortcuts

# SSH
# Dynamic Port Forwarding
# alias aws_proxy='ssh -qTfnN -D [local_ip]:[local_port] [via_user]@[via_ip]'
#
# Port Forwarding
# ssh -fN -L [local_port]:[remote_ip]:[remote_port] [via_user]:[via_ip]
# ssh -fN -L 7002:172.31.6.103:6443 ${SSH_VIA}

function set_openssl() {
  # need openssl installed by homebrew, e.g.
  # "brew install opensll"

  export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
  export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
  export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"
}

set_openssl

function set_aws_proxy() {
  if [[ -n "${SSH_VIA}" ]]; then
    alias aws_proxy='ssh -qTfnN -D 127.0.0.1:62222 ${SSH_VIA}'
  fi
}

set_aws_proxy

# autojump
[[ -f /usr/local/etc/profile.d/autojump.sh ]] && . /usr/local/etc/profile.d/autojump.sh

##############################################################
####                                                     #####
####                Utils                                #####
####                                                     #####
##############################################################

# clone github repo into local directory specified by
# _SHELL_GITHUB_REPO. The arguments are (user, repo),
# the corresponding repo will be cloned into
# `_SHELL_GITHUB_REPO/user/repo`.
# TODO: check arity

_SHELL_GITHUB_REPO="$HOME/.github"

function _install_github_repo() {
  local user="$1"
  local repo="$2"

  local userdir="${_SHELL_GITHUB_REPO}/${user}"
  mkdir -p "${userdir}"

  # install gv
  if [[ ! -d "${userdir}/${repo}" ]]; then
    git clone https://github.com/${user}/${repo}.git "${userdir}/${repo}"
  fi
}

function _update_github_repo() {
  local user="$1"
  local repo="$2"

  local repodir="${_SHELL_GITHUB_REPO}/${user}/${repo}"

  # pull latest
  if [[ -d "${repodir}" ]]; then
    (cd "${repodir}" && git pull --all)
  fi
}

function _local_repo_dir() {
  local user="$1"
  local repo="$2"
  local repo_dir="${_SHELL_GITHUB_REPO}/${user}/${repo}"

  echo "${repo_dir}"
}

# homebrew
# export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles

##############################################################
####                                                     #####
####                Golang                               #####
####                                                     #####
##############################################################

# install golang version manager - gv
function setup_gv() {
  # install gv
  _install_github_repo "shohi" "gv"

  # activate it
  local repo_dir=$(_local_repo_dir "shohi" "gv")
  source "${repo_dir}"/gv.sh
}

# update gv
function update_gv() {
  # pull gv
  _update_github_repo "shohi" "gv"

  setup_gv
}

setup_gv

# setup gopath and aliases
function setup_golang() {
  if [ -z "${GOROOT}" ]; then
    #export GOROOT=${GOROOT:-/.g/go}
    echo "error: GOROOT not set. Please install gv first"
    return 1
  fi

  export DEFAULT_GOPATH=$HOME/workshop/go
  export GOBIN=$DEFAULT_GOPATH/bin
  mkdir -p "$DEFAULT_GOPATH"/{src,bin,pkg}

  if [[ -z "${WORK_GOPATH}" ]]; then
    export GOPATH=$DEFAULT_GOPATH
    export PATH=$PATH:$GOROOT/bin:$GOBIN
  else
    export GOPATH=$DEFAULT_GOPATH:$WORK_GOPATH
    export PATH=$PATH:$GOROOT/bin:$GOBIN:$WORK_GOPATH/bin
  fi

  alias gotest='go test -v -count=1 -cover'

  alias gop='cd $DEFAULT_GOPATH'
  alias gws='cd $DEFAULT_GOPATH/src'
  alias gwp='cd $DEFAULT_GOPATH/pkg'
  alias gwb='cd $DEFAULT_GOPATH/bin'
  alias ggh='cd $DEFAULT_GOPATH/src/github.com'
  alias gosc='cd $HOME/workshop/github/golang/go'
  alias gosrc='cd $GOROOT'
}

function use_goproxy() {
  # refer, https://goproxy.io/
  # export GO111MODULE=on
  export GOPROXY=https://goproxy.io
  # export GOPROXY=https://athens.azurefd.net
  # export GOPROXY=https://mirrors.aliyun.com/goproxy/
}

setup_golang

##############################################################
####                                                     #####
####                K8s                                  #####
####                                                     #####
##############################################################
function setup_kubectl_alias() {
  # install kubectl-alias
  local user="ahmetb"
  local repo="kubectl-alias"

  _install_github_repo "${user}" "${repo}"

  local repo_dir=$(_local_repo_dir "${user}" "${repo}")
  source "${repo_dir}"/.kubectl_aliases

  alias kgnoa='kubectl get node | grep -v "NotReady"'
  alias kgnoasl='kubectl get node --show-labels | grep -v "NotReady"'
}

# update kubectl alias
function update_kubectl_alias() {
  local user="ahmetb"
  local repo="kubectl-alias"

  _update_github_repo "${user}" "${repo}"
  setup_kubectl_alias
}

function setup_kubectx() {
  local user="ahmetb"
  local repo="kubectx"

  # install repo
  _install_github_repo "${user}" "${repo}"

  # add soft link to /usr/local/bin
  local repo_dir=$(_local_repo_dir "${user}" "${repo}")
  chmod +x "${repo_dir}"/kubectx
  chmod +x "${repo_dir}"/kubens

  ln -s -f "${repo_dir}"/kubectx /usr/local/bin/kubectx
  ln -s -f "${repo_dir}"/kubectx/kubens /usr/local/bin/kubens
}

function update_kubectx() {
  local user="ahmetb"
  local repo="kubectx"

  # update repo
  _update_github_repo "${user}" "${repo}"
  setup_kubectx
}

# helm version manager
# FIXME: helmenv is global scoped, better to move to session scoped.
function setup_helmenv() {
  local user="little-angry-clouds"
  local repo="helmenv"

  # install
  _install_github_repo "${user}" "${repo}"

  local repo_dir=$(_local_repo_dir "${user}" "${repo}")
  source "${repo_dir}"/helmenv.sh
}

# update helmenv
function update_helmenv() {
  local user="little-angry-clouds"
  local repo="helmenv"

  # install
  _update_github_repo "${user}" "${repo}"

  setup_helmenv
}

setup_kubectl_alias
setup_kubectx
setup_helmenv

# print kubectl full command before running
# TODO: use [kbenv](https://github.com/little-angry-clouds/kbenv) to
# manage kubectl versions.
# refer https://kubernetes.io/docs/setup/release/version-skew-policy/
#
# TODO: redirect to StdErr
# function kubectl() {
#   echo "+ kubectl $*"
#   command kubectl "$@"
# }

##############################################################
####                                                     #####
####                Java                                 #####
####                                                     #####
##############################################################

# setup env for java
# require jdk installed first
# https://www.oracle.com/java/technologies/javase-downloads.html
function setup_java() {
  local jh
  jh="$(/usr/libexec/java_home)"

  export JAVA_HOME=${jh}
  export MAVEN_OPTS="-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true"
  # FIXME: install maven
  # export M2_HOME=/usr/local/Cellar/maven/3.6.0/libexec

  # use maven instead of gradle
  # export GRADLE_HOME=/usr/local/opt/gradle/libexec
  # export PATH="$PATH:$GRADLE_HOME/bin"
}

setup_java

##############################################################
####                                                     #####
####                Python                               #####
####                                                     #####
##############################################################

function init_pyenv() {
  # install python version manager
  if [[ -z "$(command -v pyenv)" ]]; then
    echo "please install python version manager firstly - pyenv."
    return
  fi

  # set MIRROR for python itself
  # export PYTHON_BUILD_MIRROR_URL="https://npm.taobao.org/mirrors/python"
  # NOTE: As the post points out, current pyenv can't work with the configure properly.
  # The workaround is to download the tar manually and set `PYTHON_BUILD_CACHE_PATH` to
  # the download directory, e.g
  # mkdir -p ~/.pyenv/cache
  # cd ~/.pyenv/cache && wget "https://npm.taobao.org/mirrors/python/3.8.0/Python-3.8.0.tar.xz"
  # PYTHON_BUILD_CACHE_PATH="$PWD" pyenv install 3.8.0
  mkdir -p "$HOME/.pyenv/cache"
  export PYTHON_BUILD_CACHE_PATH="$HOME/.pyenv/cache"

  # pyenv init is slow
  # issue, https://github.com/pyenv/pyenv/issues/784
  eval "$(pyenv init - zsh --no-rehash)"
}

# NOTE: as `$(pyenv init - )` is slow, leave it to load manually.
# TODO: find out a way to lazy-load pyenv
init_pyenv

function check_pip_version() {
  local pver
  pver=$(pip3 --version | awk -F '[ .]' '{print $2}')
  if [ "$pver" -lt 10 ]; then
    pip3 install pip -U
  fi
}

function setup_python() {
  # use tsinghua mirror
  # https://mirror.tuna.tsinghua.edu.cn/help/pypi/
  # TODO: check geolocation
  if [[ -n "${DISABLE_PYTHON_MIRROR}" ]]; then
    return
  fi

  if [[ ! -x "$(command -v pip3)" ]]; then
    echo "please install python first using pyevn."
    return
  fi

  # setup mirror
  local mirror_url="https://pypi.tuna.tsinghua.edu.cn/simple"

  # NOTE: pip config file `$HOME/.config/pip` and the `global.index-url`
  # item may be not exist. check exit code `$?`.
  local cur_url
  cur_url="$(pip3 config get global.index-url)"
  if [ $? -ne 0 ] || [ "${cur_url}" != "${mirror_url}" ]; then
    check_pip_version
    pip3 config set global.index-url "${mirror_url}"
  fi
}

function set_ipy_alias() {
  alias ipy="python3 -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"
}

function setup_python_alias() {
  if [[ ! -x "$(command -v python3)" ]]; then
    return
  fi

  # install ipython
  if ! pip3 list | grep "ipython" >/dev/null; then
    pip3 install -U ipython
  fi

  set_ipy_alias
}

# NOTE: never using global python2/python3 by default,
# look into `virtualenv` instead.
# setup_python
# setup_python_alias

##############################################################
####                                                     #####
####                Ruby                                 #####
####                                                     #####
##############################################################
function setup_ruby() {
  # load RVM into a shell session *as a function*
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

  # add RVM to PATH for scripting. Make sure this is the last PATH variable change.
  export PATH="$PATH:$HOME/.rvm/bin"

  # set RubyGems Source
  # check gem sources - `gem sources -l`, and replace the source.
  # gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
  if [[ ! -x "$(command -v gem)" ]]; then
    return
  fi

  local gem_source="https://gems.ruby-china.com/"
  if ! gem sources -l | grep -q ${gem_source}; then
    gem sources --add "${gem_source}" --remove https://rubygems.org/
  fi
}

setup_ruby

##############################################################
####                                                     #####
####                Rust                                 #####
####                                                     #####
##############################################################
# Default CARGO_HOME - `$HOME/.cargo`
# - https://doc.rust-lang.org/cargo/guide/cargo-home.html
#
# Default RUST_HOME - `$HOME/.rustup`
# - https://github.com/rust-lang/rustup#environment-variables
function setup_rust() {
  mkdir -p "$HOME"/.cargo
  export CARGO_HOME="$HOME"/.cargo

  # rustup toolchain mirror
  # https://mirrors.ustc.edu.cn/help/rust-static.html
  if [[ -z "${DISABLE_RUSTUP_MIRROR}" ]]; then
    export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
    export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
  fi

  # crates.io mirror
  # https://lug.ustc.edu.cn/wiki/mirrors/help/rust-crates
  # NOTE: use default registry as it's always up-to-date.
  if [[ -z "${DISABLE_CRATES_IO_MIRROR}" ]]; then
    if [[ ! -f "${CARGO_HOME}/use_ustc_mirror" ]]; then
      touch "${CARGO_HOME}/use_ustc_mirror"
      local conf
      conf=$(
        cat <<HEREDOC
# [source.crates-io]
# registry = "https://github.com/rust-lang/crates.io-index"
# replace-with = 'ustc'
[source.ustc]
registry = "https://mirrors.ustc.edu.cn/crates.io-index"
HEREDOC
      )

      echo "${conf}" >"${CARGO_HOME}"/config
    fi
  fi

  # NOTE: flamegraph crates will install both `flamegraph` and the
  # `cargo-flamegraph` subcommand.
  # https://github.com/flamegraph-rs/flamegraph
  export PATH="${CARGO_HOME}/bin:$PATH"
}

setup_rust

##############################################################
####                                                     #####
####                Flutter                              #####
####                                                     #####
##############################################################
function setup_flutter() {
  export FLUTTER_HOME=$HOME/workshop/flutter
  export PUB_HOSTED_URL=https://pub.flutter-io.cn
  export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn

  export PATH="$PATH:$FLUTTER_HOME/bin"
}

# setup_flutter

##############################################################
####                                                     #####
####                Nim                                  #####
####                                                     #####
##############################################################
function setup_nim() {
  export PATH=$HOME/.nimble/bin:$PATH
}

setup_nim

##############################################################
####                                                     #####
####                Emacs                                #####
####                                                     #####
##############################################################
# refer, https://emacsformacosx.com/tips
function setup_emacs() {
  if [[ ! -x "/Applications/Emacs.app/Contents/MacOS/Emacs" ]]; then
    echo "plz install Emacs firstly, e.g. $(brew cask install emacs)."
    return
  fi

  alias emacs="/Applications/Emacs.app/Contents/MacOS/Emacs -nw"
  alias emacsclient="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
}

setup_emacs

##############################################################
####                                                     #####
####                ctags                                #####
####                                                     #####
##############################################################
function setup_ctags() {
  # refer, https://gist.github.com/nazgob/1570678
  # replace macOS builtin one with `brew` one

  # https://github.com/liuchengxu/vista.vim#compile-ctags-with-json-format-support
  # - brew tap universal-ctags/universal-ctags
  # - brew install --with-jansson --HEAD universal-ctags/universal-ctags/universal-ctags
  # TODO: install ctags if not exist
  alias ctags='$(brew --prefix)/bin/ctags'

  # ctags setup for golang
  # require `gotags` installed first - https://github.com/jstemmer/gotags
  # TODO: check whether `gotags` is installed in $GOBIN

}

setup_ctags

##############################################################
####                                                     #####
####                bash                                 #####
####                                                     #####
##############################################################
# refer, https://stackoverflow.com/questions/370047/what-is-the-most-elegant-way-to-remove-a-path-from-the-path-variable-in-bash
function path_append() {
  path_remove "$1"
  export PATH="$PATH:$1"
}

function path_prepend() {
  path_remove "$1"
  export PATH="$1:$PATH"
}

function path_remove() {
  local np
  np=$(echo -n "$PATH" | awk -v RS=: -v ORS=: '$0 != "'"$1"'"' | sed 's/:$//')
  export PATH=$np
}

# load customized scripts from github repo.
function load_customized_scripts() {
  local user="shohi"
  local repo="blond"

  _install_github_repo "${user}" "${repo}"

  # use main entry
  local repo_dir=$(_local_repo_dir "${user}" "${repo}")
  pushd_q "${repo_dir}" || return
  source "main.sh"
  popd_q || return
}

# update customized scripts
function update_customized_scripts() {
  local user="shohi"
  local repo="blond"

  _update_github_repo "${user}" "${repo}"

  load_customized_scripts
}

load_customized_scripts

#######################################################################
#                          Clojure/babashka                           #
#######################################################################
# check whether certain file type exists in current directory.
function _file_type_exists() {
  local ft=$1
  count=$(ls -1 *."${ft}" 2>/dev/null | wc -l)
  if (($count != 0)); then
    echo true
  else
    echo false
  fi
}

function _check_and_add_to_path() {
  local ft_exists=false
  ft_exists=$(_file_type_exists $1)

  if [[ "true" == "${ft_exists}" ]]; then
    chmod +x *.clj
    export PATH=$PATH:$PWD
  fi
}

# load babashka scripts from github repo.
function load_babashka_scripts() {
  if [[ ! -x "$(command -v bb)" ]]; then
    echo "plz install babashka firstly - brew install borkdude/brew/babashka"
    return 1
  fi

  local user="shohi"
  local repo="cerise"

  _install_github_repo "${user}" "${repo}"

  # add to path
  local repo_dir=$(_local_repo_dir "${user}" "${repo}")
  export PATH=$PATH:"${repo_dir}"
}

# update babashka scripts
function update_babashka_scripts() {
  local user="shohi"
  local repo="cerise"

  _update_github_repo "${user}" "${repo}"

  load_babashka_scripts
}

function set_babashka_alias() {
  if [[ ! -x "$(command -v bb)" ]]; then
    return
  fi

  alias bb_nrepl='bb --nrepl-server 1667 &'
}

load_babashka_scripts
set_babashka_alias

#######################################################################
#######################################################################
#                               fzf                                   #
# fzf - A command-line fuzzy finder
# https://github.com/junegunn/fzf#installation
function set_fzf() {
  if [[ ! -x "$(command -v fzf)" ]]; then
    echo "fzf not found. use 'brew install fzf' to install"
    return
  fi

  # To install useful key bindings and fuzzy completion:
  # $(brew --prefix)/opt/fzf/install
}

set_fzf

#######################################################################
#                               iTerm2                                #
#######################################################################

# change iTerm2 profile from command line
# Usage: it2prof ProfileName (case sensitive)
# https://coderwall.com/p/s-2_nw/change-iterm2-color-profile-from-the-cli
function it2prof() {
  echo -e "\033]50;SetProfile=$1\a"
}

#######################################################################
#                               Gnu                                   #
#######################################################################

# install gnupg

function setup_gnupg() {
  mkdir -p ~/.gnupg

  if [[ ! -x "$(command -v gpg)" ]]; then
    brew install gnupg
    brew install pinentry-mac
    echo "pinentry-program /usr/local/bin/pinentry-mac" >>~/.gnupg/gpg-agent.conf
  fi

  # To fix the " gpg: WARNING: unsafe permissions on homedir '/home/path/to/user/.gnupg' " error
  # Make sure that the .gnupg directory and its contents is accessibile by your user.
  chown -R $(whoami) ~/.gnupg/

  # Also correct the permissions and access rights on the directory
  chmod 600 ~/.gnupg/*
  chmod 700 ~/.gnupg
}

setup_gnupg

# -*- vim: set ft=bash: -*-
