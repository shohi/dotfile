# -*- vim: set ft=bash: -*-

# NOTE: load `~/.bashrc` first which contains personal sensitive setting
[[ -f ~/.bashrc ]] && source ~/.bashrc

##############################################################
####                                                     #####
####                QUOTE                                #####
####                                                     #####
##############################################################
# refer, https://github.com/ruanyf/fortunes
function run_fortune() {
  if [[ -x "$(command -v fortune)" ]]; then
    echo
    # echo "=============== Quote Of The Day ==============="
    echo
    fortune
    echo
    # echo "================================================"
    echo
  fi
}

run_fortune


##############################################################
####                                                     #####
####                BASIC                                #####
####                                                     #####
##############################################################
# locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export EDITOR=nvim
export FIREFOX_HOME=/Applications/Firefox.app/Contents/MacOS

export PATH=/usr/local/bin:/usr/bin/sbin:$PATH:$FIREFOX_HOME

# useful env
export HOSTIP=`ipconfig getifaddr en0`

# git & hub
eval "$(hub alias -s)"
alias git='LANG=en_US git'
alias ghh='cd $HOME/workshop/github'
alias sgh='cd $HOME/workshop/github/shohi'
alias sws='cd $HOME/workshop'

# SSH
# Dynamic Port Forwarding
# alias aws_proxy='ssh -qTfnN -D [local_ip]:[local_port] [via_user]@[via_ip]'
function set_aws_proxy() {
  if [[ -n "${SSH_VIA}" ]]; then
    alias aws_proxy='ssh -qTfnN -D 127.0.0.1:62222 ${SSH_VIA}'
  fi
}

set_aws_proxy

# shortcuts for accessing folder
alias sdl='cd ~/Downloads'
alias sdc='cd ~/Documents'

# Port Forwarding
# ssh -fN -L [local_port]:[remote_ip]:[remote_port] [via_user]:[via_ip]
# ssh -fN -L 7002:172.31.6.103:6443 ${SSH_VIA}

# autojump
[[ -f /usr/local/etc/profile.d/autojump.sh ]] && . /usr/local/etc/profile.d/autojump.sh

# homebrew
# export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles


##############################################################
####                                                     #####
####                Golang                               #####
####                                                     #####
##############################################################
# use following accessible `GO_BINARY_BASE_URL`.
export GO_BINARY_BASE_URL="https://dl.google.com/go"

# install gvm
function setup_gvm() {
  mkdir -p ~/.github/moovweb && pushd -q "$_"

  local repo="gvm"

  # install gvm
  if [[ ! -d  "$repo" ]]; then
    # git clone https://github.com/moovweb/$repo.git
    git clone https://github.com/shohi/$repo.git
    SRC_REPO="https://github.com/shohi/$repo.git" source gvm/binscripts/gvm-installer
  fi

  # activate it
  source ~/.gvm/scripts/gvm

  popd -q
}

# update gvm
function update_gvm() {
  mkdir -p ~/.github/moovweb && pushd -q "$_"

  local repo="gvm"

  # update gvm
  if [[ ! -d  "$repo" ]]; then
    setup_gvm
  else
    pushd -q $PWD/$repo

    # update repo and activate it
    git pull --all
    source ~/.gvm/scripts/gvm

    popd -q
  fi

  popd -q
}

setup_gvm

# setup gopath and aliases
function setup_golang() {
  export GOROOT=${GOROOT:-/usr/local/opt/go/libexec}
  export DEFAULT_GOPATH=${GOPATH:-$HOME/workshop/go}
  export GOBIN=$DEFAULT_GOPATH/bin
  mkdir -p $DEFAULT_GOPATH/{src,bin,pkg}

  if [[ -z "${WORK_GOPATH}" ]]; then
    export GOPATH=$DEFAULT_GOPATH
    export PATH=$PATH:$GOROOT/bin:$GOBIN
  else
    export GOPATH=$DEFAULT_GOPATH:$WORK_GOPATH
    export PATH=$PATH:$GOROOT/bin:$GOBIN:$WORK_GOPATH/bin
  fi

  alias gotest='go test -v -count=1'

  alias gop='cd $DEFAULT_GOPATH'
  alias gws='cd $DEFAULT_GOPATH/src'
  alias gwp='cd $DEFAULT_GOPATH/pkg'
  alias gwb='cd $DEFAULT_GOPATH/bin'
  alias ggh='cd $DEFAULT_GOPATH/src/github.com'
  alias gosc='cd $HOME/workshop/github/golang/go'
  alias gosrc='cd $GOROOT'

  # proxy
  # export GOPROXY=https://goproxy.io
  if [[ -z "${DISABLE_GOPROXY}" ]]; then
    export GOPROXY=https://goproxy.io
    # export GOPROXY=https://athens.azurefd.net
  fi
}

setup_golang


##############################################################
####                                                     #####
####                K8s                                  #####
####                                                     #####
##############################################################
function set_kubectl_alias() {
  mkdir -p ~/.github/ahmetb && pushd -q "$_"

  # download kubectl-alias
  if [[ ! -d  "kubectl-alias" ]]; then
    git clone https://github.com/ahmetb/kubectl-alias.git
  fi

  source kubectl-alias/.kubectl_aliases

  alias kgnoa='kubectl get node | grep -v "NotReady"'
  alias kgnoasl='kubectl get node --show-labels | grep -v "NotReady"'

  popd -q
}

# update kubectl alias
function update_kubectl_alias() {
  mkdir -p ~/.github/ahmetb && pushd -q "$_"

  local repo="kubectl-alias"

  # install gvm
  if [[ ! -d  "$repo" ]]; then
    set_kubectl_alias
  else
    pushd -q $PWD/$repo
    git pull --all
    popd -q
  fi

  popd -q
}

set_kubectl_alias

# print kubectl full command before running
function kubectl() { echo "+ kubectl $@"; command kubectl $@; }


##############################################################
####                                                     #####
####                Java                                 #####
####                                                     #####
##############################################################

# setup env for java
function setup_java() {

  export JAVA_HOME=$(/usr/libexec/java_home)
  export GRADLE_HOME=/usr/local/opt/gradle/libexec
  export MAVEN_OPTS="-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true"
  export M2_HOME=/usr/local/Cellar/maven/3.6.0/libexec

  export PATH=$PATH:$GRADLE_HOME/bin
}

setup_java

##############################################################
####                                                     #####
####                Python                               #####
####                                                     #####
##############################################################
function setup_python() {
  alias ipy="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"
}

setup_python


##############################################################
####                                                     #####
####                Ruby                                 #####
####                                                     #####
##############################################################
function setup_ruby() {
  # load RVM into a shell session *as a function*
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

  # add RVM to PATH for scripting. Make sure this is the last PATH variable change.
  export PATH="$PATH:$HOME/.rvm/bin"
}

setup_ruby

##############################################################
####                                                     #####
####                Rust                                 #####
####                                                     #####
##############################################################
function setup_rust() {
  export PATH=$HOME/.cargo/bin:$PATH:$HOME/workshop/github/brendangregg/FlameGraph
}

setup_rust


##############################################################
####                                                     #####
####                Flutter                              #####
####                                                     #####
##############################################################
function setup_flutter() {
  export FLUTTER_HOME=$HOME/workshop/flutter
  export PUB_HOSTED_URL=https://pub.flutter-io.cn
  export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn

  export PATH=$PATH:$FLUTTER_HOME/bin
}

setup_flutter

##############################################################
####                                                     #####
####                Nim                                  #####
####                                                     #####
##############################################################
function setup_nim() {
  export PATH=$HOME/.nimble/bin:$PATH
}


##############################################################
####                                                     #####
####                Emacs                                #####
####                                                     #####
##############################################################
# refer, https://emacsformacosx.com/tips
function setup_emacs() {
  if [[ ! -x  "/Applications/Emacs.app/Contents/MacOS/Emacs" ]]; then
    echo "plz install Emacs firstly, e.g. `brew cask install emacs`."
  else
    alias emacs="/Applications/Emacs.app/Contents/MacOS/Emacs -nw"
    alias emacsclient="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
  fi
}

setup_emacs


##############################################################
####                                                     #####
####                ctags                                #####
####                                                     #####
##############################################################
function setup_ctags() {
  # refer, https://gist.github.com/nazgob/1570678
  # replace macOS builtin one with `brew` one
  # first install - `brew install ctags`
  # TODO: install ctags if not exist
  alias ctags="`brew --prefix`/bin/ctags"

  # ctags setup for golang
  # require `gotags` installed first - https://github.com/jstemmer/gotags
  # TODO: check whether `gotags` is installed in $GOBIN

}

setup_ctags

##############################################################
####                                                     #####
####                bash                                 #####
####                                                     #####
##############################################################
# refer, https://stackoverflow.com/questions/370047/what-is-the-most-elegant-way-to-remove-a-path-from-the-path-variable-in-bash
function path_append() {
  path_remove $1
  export PATH="$PATH:$1"
}

function path_prepend() {
  path_remove $1
  export PATH="$1:$PATH"
}

function path_remove() {
  export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`
}

# load customized scripts from github repo.
function load_customized_scripts() {
  mkdir -p ~/.github/shohi && pushd -q "$_"

  local repo="blond"

  # download "blond"
  if [[ ! -d  "blond" ]]; then
    git clone https://github.com/shohi/blond.git
  fi

  # TODO: use main entry
  source "${repo}/repo_update_gen.sh"

  popd -q
}

# update kubectl alias
function update_customized_scripts() {
  mkdir -p ~/.github/shohi && pushd -q "$_"

  local repo="blond"

  # install gvm
  if [[ ! -d  "${repo}" ]]; then
    load_customized_scripts
  else
    pushd -q "${PWD}/${repo}"

    git pull --all
    source "repo_update_gen.sh"

    popd -q
  fi

  popd -q
}

load_customized_scripts
